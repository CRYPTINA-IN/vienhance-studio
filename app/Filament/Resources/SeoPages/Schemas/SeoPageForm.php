<?php

namespace App\Filament\Resources\SeoPages\Schemas;

use Filament\Forms\Components\DateTimePicker;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\RichEditor;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Schemas\Schema;

class SeoPageForm
{
    public static function configure(Schema $schema): Schema
    {
        return $schema
            ->components([
                TextInput::make('title')
                    ->required()
                    ->maxLength(255)
                    ->live(onBlur: true)
                    ->afterStateUpdated(function ($state, $set) {
                        if ($state) {
                            $set('slug', \Illuminate\Support\Str::slug($state));
                        }
                    }),

                TextInput::make('slug')
                    ->required()
                    ->maxLength(255)
                    ->unique(ignoreRecord: true)
                    ->helperText('Auto-generated from title, but you can customize it'),

                TextInput::make('subtitle')
                    ->maxLength(255)
                    ->helperText('Optional subtitle for the page'),

                Textarea::make('description')
                    ->required()
                    ->rows(3)
                    ->maxLength(500)
                    ->helperText('Brief description of the page content'),

                FileUpload::make('featured_image')
                    ->image()
                    ->directory('seo-pages')
                    ->helperText('Featured image for the page'),

                RichEditor::make('content')
                    ->columnSpanFull()
                    ->toolbarButtons([
                        'bold',
                        'italic',
                        'link',
                        'bulletList',
                        'orderedList',
                        'h2',
                        'h3',
                        'blockquote',
                    ])
                    ->helperText('Main content of the page'),

                // AI Content Generation Fields
                TextInput::make('ai_title')
                    ->label('Page Title for AI')
                    ->placeholder('Enter the title of your page')
                    ->helperText('This will be used to generate content'),

                Textarea::make('ai_description')
                    ->label('Page Description for AI')
                    ->placeholder('Brief description of what this page should be about')
                    ->rows(3)
                    ->helperText('This will be used to generate content'),

                TextInput::make('ai_keywords')
                    ->label('Target Keywords')
                    ->placeholder('Enter target keywords (comma separated)')
                    ->helperText('Optional: Specific keywords you want to target'),

                Textarea::make('ai_prompt')
                    ->label('AI Prompt')
                    ->placeholder('Additional instructions for AI (optional)')
                    ->rows(3)
                    ->helperText('Any specific requirements or style preferences - Use the "Generate Page Content" button in the toolbar above to generate content automatically'),

                // SEO Settings Fields
                Toggle::make('is_active')
                    ->label('Active')
                    ->default(true)
                    ->helperText('Whether this page is active and visible'),

                DateTimePicker::make('published_at')
                    ->label('Publish Date')
                    ->helperText('When this page should be published'),

                Toggle::make('is_ai_generated')
                    ->label('AI Generated')
                    ->default(false)
                    ->disabled()
                    ->helperText('Indicates if this page was generated by AI'),
            ]);
    }

    protected static function generateContentAndUpdateForm(array $data): void
    {
        try {
            // Check if Gemini API key is configured
            if (empty(config('prism.providers.gemini.api_key')) || config('prism.providers.gemini.api_key') === 'your_gemini_api_key_here') {
                \Filament\Notifications\Notification::make()
                    ->title('Gemini API Key Not Configured')
                    ->body('Please set your GEMINI_API_KEY in the .env file to use AI content generation.')
                    ->warning()
                    ->send();

                return;
            }

            $aiTitle = $data['ai_title'] ?? '';
            $aiDescription = $data['ai_description'] ?? '';
            $aiKeywords = $data['ai_keywords'] ?? '';
            $aiPrompt = $data['ai_prompt'] ?? '';

            if (empty($aiTitle) || empty($aiDescription)) {
                \Filament\Notifications\Notification::make()
                    ->title('Missing Required Fields')
                    ->body('Please fill in the Page Title and Description for AI generation.')
                    ->warning()
                    ->send();

                return;
            }

            $prompt = self::buildPrompt($aiTitle, $aiDescription, $aiKeywords, $aiPrompt);

            $response = \Prism\Prism\Prism::text()
                ->using(\Prism\Prism\Enums\Provider::Gemini, 'gemini-2.0-flash')
                ->withPrompt($prompt)
                ->asText();

            $pageContent = self::parseResponse($response->text);

            // Show the generated content and provide JavaScript to update form
            self::showGeneratedContentWithJavaScript($pageContent);

        } catch (\Exception $e) {
            \Filament\Notifications\Notification::make()
                ->title('Error Generating Content')
                ->body('There was an error: '.$e->getMessage())
                ->danger()
                ->send();
        }
    }

    protected static function buildPrompt(string $title, string $description, ?string $keywords, ?string $prompt): string
    {
        return "Please generate comprehensive page content for the following:

Page Title: {$title}
Page Description: {$description}
Target Keywords: {$keywords}
Additional Instructions: {$prompt}

Please provide the following in JSON format:
1. Page Title (optimized for SEO)
2. Page Subtitle (engaging subtitle)
3. Meta Description (150-160 characters, SEO optimized)
4. Page Content (comprehensive HTML content with proper headings, paragraphs, and structure)
5. Target Keywords (comma-separated, based on content)
6. SEO Summary (brief summary of SEO optimization)

Format the response as valid JSON with these keys: page_title, subtitle, meta_description, page_content, target_keywords, seo_summary

Make sure the content is:
- Engaging and informative
- SEO-friendly with proper heading structure (H2, H3). Do not include any H1 heading in the content because the page already renders the title in an H1.
- The page_title must NOT include brand or site suffixes, or pipes like \"| Vienhance\". Only return the pure page title.
- Includes the target keywords naturally
- Well-structured with paragraphs, lists, and formatting
- Professional and relevant to the page topic";
    }

    protected static function parseResponse(string $response): array
    {
        // Try to extract JSON from the response
        if (preg_match('/\{.*\}/s', $response, $matches)) {
            $json = $matches[0];
            $data = json_decode($json, true);

            if ($data) {
                return [
                    'page_title' => $data['page_title'] ?? '',
                    'subtitle' => $data['subtitle'] ?? '',
                    'meta_description' => $data['meta_description'] ?? '',
                    'page_content' => $data['page_content'] ?? '',
                    'target_keywords' => $data['target_keywords'] ?? '',
                    'seo_summary' => $data['seo_summary'] ?? '',
                ];
            }
        }

        return [
            'page_title' => '',
            'subtitle' => '',
            'meta_description' => '',
            'page_content' => '',
            'target_keywords' => '',
            'seo_summary' => '',
        ];
    }

    protected static function showGeneratedContentWithJavaScript(array $pageContent): void
    {
        $content = "**Generated Page Content:**\n\n";
        $content .= '**Page Title:** '.$pageContent['page_title']."\n\n";
        $content .= '**Subtitle:** '.$pageContent['subtitle']."\n\n";
        $content .= '**Meta Description:** '.$pageContent['meta_description']."\n\n";
        $content .= '**Target Keywords:** '.$pageContent['target_keywords']."\n\n";
        $content .= '**SEO Summary:** '.$pageContent['seo_summary']."\n\n";
        $content .= "**Page Content Preview:** \n".substr(strip_tags($pageContent['page_content']), 0, 300)."...\n\n";
        $content .= "**âœ… Form fields will be automatically filled!**\n";
        $content .= "**Instructions:** \n";
        $content .= "1. Wait for the JavaScript to run\n";
        $content .= "2. All fields will be automatically filled\n";
        $content .= "3. Click 'Save' to create the page\n";

        \Filament\Notifications\Notification::make()
            ->title('Page Content Generated Successfully!')
            ->body($content)
            ->success()
            ->persistent()
            ->send();

        // Execute JavaScript to update form fields
        $script = "
        setTimeout(function() {
            // Update title field
            const titleField = document.querySelector('input[name=\"title\"]');
            if (titleField) {
                titleField.value = ".json_encode($pageContent['page_title']).";
                titleField.dispatchEvent(new Event('input', { bubbles: true }));
            }
            
            // Update subtitle field
            const subtitleField = document.querySelector('input[name=\"subtitle\"]');
            if (subtitleField) {
                subtitleField.value = ".json_encode($pageContent['subtitle']).";
                subtitleField.dispatchEvent(new Event('input', { bubbles: true }));
            }
            
            // Update description field
            const descriptionField = document.querySelector('textarea[name=\"description\"]');
            if (descriptionField) {
                descriptionField.value = ".json_encode($pageContent['meta_description']).";
                descriptionField.dispatchEvent(new Event('input', { bubbles: true }));
            }
            
            // Update content field (RichEditor)
            const contentField = document.querySelector('.ProseMirror');
            if (contentField) {
                contentField.innerHTML = ".json_encode($pageContent['page_content']).";
                contentField.dispatchEvent(new Event('input', { bubbles: true }));
            }
            
            // Update AI generated checkbox
            const aiGeneratedField = document.querySelector('input[name=\"is_ai_generated\"]');
            if (aiGeneratedField) {
                aiGeneratedField.checked = true;
                aiGeneratedField.dispatchEvent(new Event('change', { bubbles: true }));
            }
            
            // Update publish date
            const publishDateField = document.querySelector('input[name=\"published_at\"]');
            if (publishDateField) {
                publishDateField.value = '".now()->format('Y-m-d\TH:i:s')."';
                publishDateField.dispatchEvent(new Event('input', { bubbles: true }));
            }
        }, 1000);
        ";

        // Inject the JavaScript into the page
        echo "<script>{$script}</script>";
    }
}
